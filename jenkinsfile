pipeline {
    agent any
    
    stages {
        stage('Check Folder Exists') {
            steps {
                script {
                    def folderName = '/path/to/your/new/folder'
                    def folder = new File(folderName)
                    if (folder.exists()) {
                        currentBuild.description = "Folder '$folderName' already exists."
                        echo "Folder '$folderName' already exists."
                        // Set a variable to skip the folder creation in the next stage
                        env.CREATE_FOLDER = 'false'
                    } else {
                        echo "Folder '$folderName' does not exist. Proceeding to create it."
                        // Set a variable to indicate folder creation will be done in the next stage
                        env.CREATE_FOLDER = 'true'
                    }
                }
            }
        }

        stage('Create Folder') {
            when {
                expression {
                    return env.CREATE_FOLDER == 'true'
                }
            }
            steps {
                script {
                    def folderName = '/path/to/your/new/folder'
                    def folder = new File(folderName)
                    boolean created = folder.mkdirs()
                    if (created) {
                        echo "Folder '$folderName' created successfully."
                    } else {
                        echo "Failed to create the folder '$folderName'."
                    }
                }
            }
        }

        stage('Confirm Folder Creation') {
            steps {
                script {
                    def folderName = '/path/to/your/new/folder'
                    def folder = new File(folderName)
                    if (folder.exists()) {
                        echo "Confirmed: Folder '$folderName' exists."
                    } else {
                        echo "Folder '$folderName' still does not exist."
                    }
                }
            }
        }
    }
}
